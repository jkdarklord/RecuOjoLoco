/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainPackage;

import edu.cmu.sphinx.api.Configuration;
import edu.cmu.sphinx.api.LiveSpeechRecognizer;
import java.awt.Desktop;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.speech.Central;
import javax.speech.synthesis.Synthesizer;
import javax.speech.synthesis.SynthesizerModeDesc;
import javax.speech.synthesis.SynthesizerProperties;
import javax.speech.synthesis.Voice;
import static javax.speech.synthesis.Voice.AGE_TEENAGER;
import static javax.speech.synthesis.Voice.GENDER_FEMALE;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author zayda
 */
public class SearchInterface extends javax.swing.JFrame {

    /**
     * Creates new form SearchInterface
     */
    
    ArrayList<String>resultNames;
    ArrayList<String>resultSummaries;
    String selectedURL;
    Synthesizer synthesizer;
    boolean isReading;
    int actualResult;
    
    // Elementos de reconocimiento de voz
    Configuration configuration;
    LiveSpeechRecognizerExtention recognizer;
    
    public SearchInterface() {
        initComponents();
        tableResults.getTableHeader().setVisible(false);
        btnAccessURL.setVisible(false);
        btnReading.setVisible(false);
        try{
            System.setProperty("freetts.voices",
           "com.sun.speech.freetts.en.us.cmu_us_kal.KevinVoiceDirectory");
            Central.registerEngineCentral
            ("com.sun.speech.freetts.jsapi.FreeTTSEngineCentral");
            synthesizer = Central.createSynthesizer(new SynthesizerModeDesc(Locale.US));
            
            synthesizer.allocate();
            synthesizer.resume();
            
            Voice voice = new Voice(null,GENDER_FEMALE,AGE_TEENAGER,null);
            SynthesizerProperties synthesizerProperties = synthesizer.getSynthesizerProperties();
            synthesizerProperties.setVoice(voice);
            
            // Default: pitch-range 11.0 , pitch: 100.0, speaking-rate: 150.0
            synthesizerProperties.setPitchRange(10.0f);
            synthesizerProperties.setPitch(130.0f);
            synthesizerProperties.setSpeakingRate(130.0f);
            
        }
        catch(Exception e)
          {
            System.err.println(e);
          }
        
        // Inicializar reconocimiento de voz
        configuration = new Configuration();
        // Set path to acoustic model.
        configuration.setAcousticModelPath("./sphinx/en-us/en-us");
        // Set path to dictionary.
        configuration.setDictionaryPath("./sphinx/search/7990.dic");
        // Set language model.
        configuration.setLanguageModelPath("./sphinx/search/7990.lm");
        
        try {
            recognizer = new LiveSpeechRecognizerExtention(configuration);
        } catch (IOException ex) {
            Logger.getLogger(SearchInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        textSearchBar = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResults = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        textSummary = new javax.swing.JTextArea();
        btnAccessURL = new javax.swing.JButton();
        btnReading = new javax.swing.JButton();
        speechRecognitionButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelTitle.setText("New search");

        buttonSearch.setText("Search");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        tableResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        tableResults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableResultsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableResults);

        textSummary.setColumns(20);
        textSummary.setLineWrap(true);
        textSummary.setRows(5);
        jScrollPane2.setViewportView(textSummary);

        btnAccessURL.setText("Open link in browser");
        btnAccessURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccessURLActionPerformed(evt);
            }
        });

        btnReading.setText("Start reading");
        btnReading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadingActionPerformed(evt);
            }
        });

        speechRecognitionButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        speechRecognitionButton.setText("Speech Recognition");
        speechRecognitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speechRecognitionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelTitle)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(401, 401, 401)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52))))
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(textSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSearch)
                .addGap(39, 39, 39)
                .addComponent(speechRecognitionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAccessURL)
                .addGap(18, 18, 18)
                .addComponent(btnReading, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(labelTitle)
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSearch)
                    .addComponent(speechRecognitionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccessURL)
                    .addComponent(btnReading))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
        //PostingsList.PostingsListElement[] results = IndexerControler.searchQueryOnIndex(textSearchBar.getText().toLowerCase());
        doSearch(false);
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void accessURL(){
        if (Desktop.isDesktopSupported()) {
            try {
               URI url = new URI(""+ selectedURL);
               Desktop.getDesktop().browse(url);
              } 
            catch (Exception e) { 
                System.err.println(e);
            }
        }
    }
    
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            doSearch(false);
        }
    }//GEN-LAST:event_formKeyPressed

    private void tableResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableResultsMouseClicked
        // TODO add your handling code here:
        int row = tableResults.getSelectedRow();
        int col = tableResults.getSelectedColumn();
        selectedURL = (String)tableResults.getValueAt(row, col);
        textSummary.setText(resultSummaries.get(row));
        textSummary.setCaretPosition(0);
        btnAccessURL.setVisible(true);
        btnReading.setVisible(true);
        isReading = false;
    }//GEN-LAST:event_tableResultsMouseClicked

    private void btnAccessURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccessURLActionPerformed
        accessURL();
    }//GEN-LAST:event_btnAccessURLActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try{
            synthesizer.deallocate();
        }
        catch(Exception e)
        {
            System.err.println(e);
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void btnReadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadingActionPerformed
        // TODO add your handling code here:
        read();
    }//GEN-LAST:event_btnReadingActionPerformed

    private void read()
    {
        if(!isReading){
            isReading=true;
            btnReading.setText("Stop reading");
            try{
                synthesizer.speakPlainText(textSummary.getText(), null);
                // synthesizer.waitEngineState(Synthesizer.QUEUE_EMPTY);
              }
            catch(Exception e)
            {
                System.err.println(e);
            }
        }
        else{
            isReading=false;
            btnReading.setText("Start reading");
            synthesizer.cancelAll();
            //see http://atifullahbaig.blogspot.com/2012/07/building-text-to-speech-java.html
        }
    }
    
    private void speechRecognitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speechRecognitionButtonActionPerformed
        recognizer.openRecognitionLine();
        recognizer.startRecognition(true);
        String h = "";
        h += recognizer.getResult().getHypothesis();
        recognizer.stopRecognition();
        recognizer.closeRecognitionLine();
        System.out.println(h);
        
        switch(h)
        {
            case "SUBMIT QUERY":
            case "QUERY":
                doSearch(false);
                
            case "FIRST":
            case "FIRST RESULT":
                if(isReading)
                    read();
                actualResult = 0;
                setActualResult();
                break;
                
            case "NEXT":
            case "NEXT RESULT":
                if(isReading)
                    read();
                actualResult++;
                if(actualResult >= tableResults.getRowCount())
                {
                    //Reset
                    actualResult = 0;
                }
                setActualResult();
                break;
            
            case "OPEN":
            case "OPEN LINK":
            case "OPEN RESULT":
                accessURL();
                break;
            
            case "READ":
            case "START READING":
            case "READ RESULT":  
                if(!isReading)
                    read();
                break;
            
            case "STOP":
            case "STOP READING":
                if(isReading)
                    read();
                break;
        }
    }//GEN-LAST:event_speechRecognitionButtonActionPerformed
    
    private void setActualResult()
    {
        selectedURL = (String)tableResults.getValueAt(actualResult, 0);
        textSummary.setText(resultSummaries.get(actualResult));
        textSummary.setCaretPosition(0);
        btnAccessURL.setVisible(true);
        btnReading.setVisible(true);
        isReading = false;
        read();
    }
    
    private void doSearch(boolean special){
        PostingsList.PostingsListElement[] results = IndexerControler.searchQueryOnIndex2(textSearchBar.getText().toLowerCase());
        if(results==null){
            JOptionPane.showMessageDialog(null,"Your search didn't return any results.\nPlease try again using different keywords.");
        }
        else{
            DefaultTableModel model = (DefaultTableModel) tableResults.getModel();
            model.setRowCount(0);
            int limit = results.length;
            if (special){
                limit = 1;
            }
            resultNames=new ArrayList<String>();
            resultSummaries=new ArrayList<String>();
            try{   
                    
                for(int i=0;i<limit;i++){
                    BufferedReader bufferedReader = new BufferedReader(new FileReader(IndexerControler.idxr.pathFromDocID(results[i].docID)));    
                    String currentResult = bufferedReader.readLine();
                    String line;
                    while((line=bufferedReader.readLine())==null){
                    //nothing
                    }
                    String currentSummary=bufferedReader.readLine() + bufferedReader.readLine() + bufferedReader.readLine();
                    if(currentSummary.length()>=600){
                        resultNames.add(currentResult);
                        resultSummaries.add(currentSummary);

                        if(special){
                            selectedURL = currentResult;
                            textSummary.setText(currentSummary + "\nRead more by opening this website...");
                        }
                        else{
                            model.addRow(new Object[]{currentResult});
                        }
                    }
                    bufferedReader.close();
                }
            }
                catch(IOException ex){
                    System.out.println(ex);
                }
                
            printResults();
            actualResult = 0;
        }
    }
    
    private void printResults(){
        System.out.println(resultNames.size());
        for(int i=0;i<resultNames.size();i++){
            System.out.println(resultNames.get(i)+": " + resultSummaries.get(i));
        }
          
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccessURL;
    private javax.swing.JButton btnReading;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JButton speechRecognitionButton;
    private javax.swing.JTable tableResults;
    private javax.swing.JTextField textSearchBar;
    private javax.swing.JTextArea textSummary;
    // End of variables declaration//GEN-END:variables
}
