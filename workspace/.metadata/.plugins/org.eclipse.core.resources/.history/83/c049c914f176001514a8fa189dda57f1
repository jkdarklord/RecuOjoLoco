package test;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Vector;

public class PostingsList implements Serializable
{
	private int nextList;
	private long maxListSize;
	
	public class PostingsListElement implements Serializable
	{
		public int docID;
		public int termID;
		public int df;
		
		public String toString()
		{
			return docID + " " + termID + " " + df;
		}
	}
	
	public transient Vector<PostingsListElement> postings;
	public transient int actualList;
	
	public PostingsList()
	{
		postings = new Vector<PostingsListElement>();
		nextList = 0;
		actualList = 0;
		
		// We will estimate 1 third of memory for a postings list block
		// So we may be able to hold two at the same time
		long elementLength = ObjectSizeFetcher.getObjectSize(new PostingsListElement());
		long mem = Runtime.getRuntime().maxMemory();
		maxListSize = (mem / 3) / elementLength;
	}
	
	public PostingsListElement append(int docID, int termID, int df)
	{
		if(actualList == -1)
		{
			postings = new Vector<PostingsListElement>();
			actualList = nextList;
			nextList++;
		}
		else
		{
			checkSize();
		}
		
		PostingsListElement p = new PostingsListElement();
		p.docID = docID;
		p.termID = termID;
		p.df = df;
		postings.add(p);
		
		checkSize();
		
		return p;
	}
	
	public void checkSize()
	{
		if(postings.size() >= maxListSize)
		{
			save();
			
			if(actualList + 1 >= nextList)
			{
				actualList = nextList;
				nextList++;
				postings = new Vector<PostingsListElement>();
			}
			else
			{
				actualList = -1;
				postings = null;
			}
			
		}
	}
	
	public String toString()
	{
		return postings.toString();
	}
	
	public void save()
	{
		try
		{  
			FileOutputStream file = new FileOutputStream(actualList + ".ser");
			ObjectOutputStream output = new ObjectOutputStream(file);   
			output.writeObject(postings);
			output.close();
			
			//postings = new Vector<PostingsListElement>();
			//actualList = nextList;
			//nextList++;
		}catch(Exception ex)
		{
			ex.printStackTrace();
		}
	}
	
	public void load(int list)
	{
		if( list < nextList )
		{
			try
			{
				FileInputStream file = new FileInputStream(list + ".ser");
				ObjectInputStream input = new ObjectInputStream(file);
				postings = (Vector<PostingsListElement>) input.readObject();
				input.close();
				actualList = list;
			}catch (IOException | ClassNotFoundException e)
			{
				e.printStackTrace();
			}
		}
	}
}
